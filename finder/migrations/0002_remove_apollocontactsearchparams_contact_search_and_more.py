# Generated by Django 5.2 on 2025-04-17 17:43

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('finder', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='apollocontactsearchparams',
            name='contact_search',
        ),
        migrations.RemoveField(
            model_name='hunterdomainsearchparams',
            name='contact_search',
        ),
        migrations.RemoveField(
            model_name='serpapisearchparams',
            name='company_search',
        ),
        migrations.RemoveField(
            model_name='webscrapesearchparams',
            name='contact_search',
        ),
        migrations.CreateModel(
            name='ApolloCompanySearchParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization_num_employees_ranges', models.JSONField(blank=True, default=list, help_text="Employee count ranges for companies (format: '1,10')")),
                ('organization_locations', models.JSONField(blank=True, default=list, help_text='Locations of company headquarters')),
                ('organization_not_locations', models.JSONField(blank=True, default=list, help_text='Exclude companies based on headquarters location')),
                ('revenue_range_min', models.BigIntegerField(blank=True, help_text='Lower range of organization revenue', null=True)),
                ('revenue_range_max', models.BigIntegerField(blank=True, help_text='Upper range of organization revenue', null=True)),
                ('currently_using_any_of_technology_uids', models.JSONField(blank=True, default=list, help_text='Technologies currently used by organizations')),
                ('q_organization_keyword_tags', models.JSONField(blank=True, default=list, help_text='Keywords associated with companies')),
                ('q_organization_name', models.CharField(blank=True, help_text='Specific company name to filter by', max_length=255)),
                ('organization_ids', models.JSONField(blank=True, default=list, help_text='Apollo IDs for specific companies to include')),
                ('page', models.PositiveIntegerField(default=1, help_text='Page number to retrieve')),
                ('per_page', models.PositiveIntegerField(default=10, help_text='Number of results per page')),
                ('company_search', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='apollo_parameters', to='finder.companysearch')),
            ],
        ),
        migrations.CreateModel(
            name='ApolloContactSearchParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person_titles', models.JSONField(blank=True, default=list, help_text='Job titles held by the people you want to find')),
                ('include_similar_titles', models.BooleanField(default=True, help_text='Whether to include people with similar job titles')),
                ('person_locations', models.JSONField(blank=True, default=list, help_text='Locations where people live (cities, states, countries)')),
                ('organization_locations', models.JSONField(blank=True, default=list, help_text='Locations of company headquarters')),
                ('person_seniorities', models.JSONField(blank=True, default=list, help_text='Job seniority levels')),
                ('organization_domains', models.JSONField(blank=True, default=list, help_text="Domain names for the person's employer")),
                ('organization_ids', models.JSONField(blank=True, default=list, help_text='Apollo IDs for the companies to include')),
                ('organization_num_employees_ranges', models.JSONField(blank=True, default=list, help_text="Employee count ranges for companies (format: '1,10')")),
                ('contact_email_status', models.JSONField(blank=True, default=list, help_text='Email statuses to search for')),
                ('q_keywords', models.CharField(blank=True, help_text='Keywords to filter results', max_length=255)),
                ('page', models.PositiveIntegerField(default=1, help_text='Page number to retrieve')),
                ('per_page', models.PositiveIntegerField(default=10, help_text='Number of results per page')),
                ('contact_search', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='apollo_parameters', to='finder.contactsearch')),
            ],
        ),
        migrations.CreateModel(
            name='HunterDomainSearchParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(blank=True, help_text="Domain name to search (e.g., 'stripe.com')", max_length=255)),
                ('company', models.CharField(blank=True, help_text="Company name to search (e.g., 'Stripe')", max_length=255)),
                ('type', models.CharField(choices=[('generic', 'Generic'), ('personal', 'Personal'), ('all', 'All')], default='all', help_text='Type of email addresses to return', max_length=10)),
                ('seniority_levels', models.JSONField(blank=True, default=list, help_text='Seniority levels to filter by')),
                ('departments', models.JSONField(blank=True, default=list, help_text='Departments to filter by')),
                ('required_fields', models.JSONField(blank=True, default=list, help_text='Fields that must be present')),
                ('limit', models.IntegerField(default=10, help_text='Maximum number of email addresses to return')),
                ('offset', models.IntegerField(default=0, help_text='Number of email addresses to skip')),
                ('contact_search', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hunter_parameters', to='finder.contactsearch')),
            ],
            options={
                'verbose_name': 'Hunter Domain Search Parameters',
                'verbose_name_plural': 'Hunter Domain Search Parameters',
            },
        ),
        migrations.CreateModel(
            name='SerpAPISearchParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(help_text='The search query (q parameter)', max_length=255)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude component for the ll parameter', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude component for the ll parameter', null=True)),
                ('zoom', models.IntegerField(default=14, help_text='Zoom level (3z to 21z)')),
                ('google_domain', models.CharField(choices=[('google.com', 'Google.com (US)'), ('google.co.uk', 'Google UK'), ('google.fr', 'Google France')], default='google.com', help_text='Google domain to use', max_length=20)),
                ('language', models.CharField(default='en', help_text='Language code (e.g., en, es, fr)', max_length=5)),
                ('country', models.CharField(blank=True, help_text='Country code (e.g., us, uk, fr)', max_length=5)),
                ('start', models.IntegerField(default=0, help_text='Result offset for pagination')),
                ('per_page', models.IntegerField(default=20, help_text='Number of results per page')),
                ('no_cache', models.BooleanField(default=False, help_text='Force a fresh search instead of using cached results')),
                ('company_search', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='serpapi_parameters', to='finder.companysearch')),
            ],
            options={
                'verbose_name': 'SerpAPI Search Parameters',
                'verbose_name_plural': 'SerpAPI Search Parameters',
            },
        ),
        migrations.CreateModel(
            name='WebScrapeParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_url', models.URLField(help_text='The company website URL to start scraping', max_length=512)),
                ('max_depth', models.IntegerField(default=2, help_text='Maximum link depth to follow from the initial page (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('max_pages', models.IntegerField(default=100, help_text='Maximum number of pages to scrape', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('stay_within_domain', models.BooleanField(default=True, help_text='Only follow links that belong to the same domain')),
                ('follow_subdomains', models.BooleanField(default=True, help_text='Follow links to subdomains of the target domain')),
                ('priority_paths', models.JSONField(blank=True, default=list, help_text="List of URL paths to prioritize (e.g., '/about', '/team', '/contact')")),
                ('exclude_paths', models.JSONField(blank=True, default=list, help_text="List of URL paths to exclude (e.g., '/products', '/blog')")),
                ('target_keywords', models.JSONField(blank=True, default=list, help_text='Keywords that suggest a page may contain contact information')),
                ('extract_names', models.BooleanField(default=True, help_text='Attempt to extract names associated with email addresses')),
                ('extract_job_titles', models.BooleanField(default=True, help_text='Attempt to extract job titles associated with email addresses')),
                ('extract_phone_numbers', models.BooleanField(default=True, help_text='Extract phone numbers from the website')),
                ('request_delay', models.FloatField(default=1.0, help_text='Delay between requests in seconds (to avoid overloading the server)', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(10.0)])),
                ('concurrent_requests', models.IntegerField(default=5, help_text='Number of concurrent requests', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('request_timeout', models.FloatField(default=30.0, help_text='Request timeout in seconds', validators=[django.core.validators.MinValueValidator(5.0), django.core.validators.MaxValueValidator(120.0)])),
                ('follow_robotstxt', models.BooleanField(default=True, help_text='Respect robots.txt directives')),
                ('user_agent', models.CharField(blank=True, default='Mozilla/5.0 (compatible; CompanyBot/1.0)', help_text='User agent string to use for requests', max_length=255)),
                ('contact_search', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='webscrape_parameters', to='finder.contactsearch')),
            ],
            options={
                'verbose_name': 'Web Scrape Parameters',
                'verbose_name_plural': 'Web Scrape Parameters',
            },
        ),
        migrations.DeleteModel(
            name='ApolloCompanySearchParams',
        ),
        migrations.DeleteModel(
            name='ApolloContactSearchParams',
        ),
        migrations.DeleteModel(
            name='HunterDomainSearchParams',
        ),
        migrations.DeleteModel(
            name='SerpAPISearchParams',
        ),
        migrations.DeleteModel(
            name='WebScrapeSearchParams',
        ),
    ]
