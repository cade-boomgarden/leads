# Generated by Django 5.2 on 2025-04-18 16:51

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('companies', '0003_company_city_company_state_company_state_code'),
        ('contacts', '0002_alter_contact_apollo_contact_roles_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('selection_method', models.CharField(choices=[('email_prefix', 'Email Prefix Hierarchy'), ('department', 'By Department'), ('seniority', 'By Seniority Level'), ('job_title', 'By Job Title')], default='email_prefix', max_length=20)),
                ('email_prefix_hierarchy', models.JSONField(blank=True, default=list, help_text="List of email prefixes to try, in order of preference (e.g., ['sales', 'info', 'contact'])")),
                ('target_department', models.CharField(blank=True, help_text='Target department name to select contacts from', max_length=100, null=True)),
                ('minimum_seniority', models.IntegerField(default=0, help_text='Minimum seniority level (0-10, where 10 is highest)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('job_title_keywords', models.JSONField(blank=True, default=list, help_text='List of job title keywords to match, in order of preference')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_generated', models.DateTimeField(blank=True, null=True)),
                ('company_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cohorts', to='companies.companylist')),
                ('contacts', models.ManyToManyField(blank=True, related_name='cohorts', to='contacts.contact')),
            ],
        ),
    ]
